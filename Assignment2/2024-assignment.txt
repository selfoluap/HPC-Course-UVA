ASSIGNMENT FOR "CLUSTER COMPUTING" (15th January 2024)
------------------------------------------------------

ANALYSYS OF THE COMPUTATION OF PI BASED ON THE LEIBNIZ SERIES

In this assignment you are going to work with a parallel code written in C using the OpenMP library. The necessary files that need to be used are indicated below (you may also find them in your home directory of Snellius, on the directory "$HOME/linux-cluster-computing/cluster/batch/").

= pi.c ===========================================
#include <omp.h>
#include <math.h>
#include <stdio.h>
#include <stdlib.h>

int main (int argc, char *argv[])
{

  //initialize variables
  int i;
  double pi = 0;
  int niter = 1000000000;

  // Get timing
  double start,end;
  start=omp_get_wtime();

  // Calculate PI using Leibnitz sum
  /* Fork a team of threads */
  #pragma omp parallel for reduction(+ : pi)
  for(i = 0; i < niter; i++)
  {
     pi = pi + pow(-1, i) * (4 / (2*((double) i)+1));
  } /* Reduction operation is done. All threads join master thread and disband */

  // Stop timing
  end=omp_get_wtime();

  // Print result
  printf("Pi estimate: %.20f, obtained in %f seconds\n", pi, end-start);
}
==================================================


The code needs to be compiled with the following commands on Snellius:

= compilepi ======================================
#!/bin/bash

module load 2022
module load GCCcore-11.3.0
gcc -fopenmp -o pi pi.c -lm
==================================================


The basis script to submit the job would be as follows:

= pi.sh ==========================================
#!/bin/bash
#SBATCH --job-name="pi"
#SBATCH --nodes=1
#SBATCH --ntasks=1
#SBATCH --cpus-per-task=32
#SBATCH --time=00:10:00
#SBATCH --partition=normal
#SBATCH --output=pi_%j.out
#SBATCH --error=pi_%j.err

module purge
module load 2022
module load GCCcore-11.3.0

echo "OpenMP parallelism"
echo

for ncores in `seq 8 4 48`

do
  export OMP_NUM_THREADS=$ncores

  echo "CPUS: " $OMP_NUM_THREADS
  echo "CPUS: " $OMP_NUM_THREADS >&2
  ./pi
  echo "DONE "
done
==================================================


Given the previous introduction, please do the following tasks:

- Compile and run a sequence of pi computations with different number of threads: from 8 threads, you should increase the number of threads in 4 for every successive simulation, until you reach 48 threads. Plot a graph to show the execution times of the computation (Y-axis) with respect to the amount of threads (X-axis). How would you explain the observed performance, considering that you have requested 32 cores from a node on Snellius?
- Compile the code with 31250000, 62500000, 125000000, 250000000, 500000000, 1000000000 and 2000000000 numbers in the Leibniz series (changing the value of "niter") and run the pi computation only with 32 threads in all cases. Plot a graph to show the execution times of the computation (Y-axis) with respect to the amount of iterations (X-axis).
